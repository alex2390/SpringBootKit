package pan.springbootkit.utils.designpattern.设计模式.结构型.外观模式;

/**
 * Created by panzhangbao on 2017/9/18.
 * Copyright © 2017年 panzhangbao. All rights reserved.
 */

/** 医院的例子

 　　现代的软件系统都是比较复杂的，设计师处理复杂系统的一个常见方法便是将其“分而治之”，把一个系统划分为几个较小的子系统。
 如果把医院作为一个子系统，按照部门职能，这个系统可以划分为挂号、门诊、划价、化验、收费、取药等。
 看病的病人要与这些部门打交道，就如同一个子系统的客户端与一个子系统的各个类打交道一样，不是一件容易的事情。
 首先病人必须先挂号，然后门诊。如果医生要求化验，病人必须首先划价，然后缴费，才可以到化验部门做化验。化验后再回到门诊室。
 */

/**
 * 解决这种不便的方法便是引进门面模式，医院可以设置一个接待员的位置，由接待员负责代为挂号、划价、缴费、取药等。
 * 这个接待员就是门面模式的体现，病人只接触接待员，由接待员与各个部门打交道。
 */
public class Main9 {

    public static void main(String[] args) {
        Facade facade = new Facade();
        facade.test();

        /** 使用门面模式还有一个附带的好处，就是能够有选择性地暴露方法。
         * 一个模块中定义的方法可以分成两部分，一部分是给子系统外部使用的，
         * 一部分是子系统内部模块之间相互调用时使用的。有了Facade类，
         * 那么用于子系统内部模块之间相互调用的方法就不用暴露给子系统外部了。
         */
    }
}
