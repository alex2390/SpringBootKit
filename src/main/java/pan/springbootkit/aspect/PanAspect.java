package pan.springbootkit.aspect;import lombok.extern.slf4j.Slf4j;import org.aspectj.lang.JoinPoint;import org.aspectj.lang.annotation.*;import org.springframework.stereotype.Component;import org.springframework.web.context.request.RequestContextHolder;import org.springframework.web.context.request.ServletRequestAttributes;import pan.springbootkit.utils.http.PanHttpUtil;import javax.servlet.http.HttpServletRequest;/** * 切面 * * Created by panzhangbao on 2017/10/23. * Copyright © 2017年 panzhangbao. All rights reserved. */@Slf4j@Aspect@Componentpublic class PanAspect {    /**     * execution：用于匹配子表达式。     *  	匹配 pan.springbootkit.aspect.service 包及其子包中所有类中的所有方法，返回类型任意，方法参数任意	 *  		第一个 * 代表返回类型不限	 *  		第二个 * 代表所有类	 *  		第三个 * 代表所有方法	 *	 *  		.. 标识方法里的参数不限     */    @Pointcut("execution(public * pan.springbootkit.aspect.controller.*.*(..))")    public void executePointcut() {        // 此处无需写任何代码    }    // within：用于匹配连接点所在的Java类或者包。//    @Pointcut("within(pan.service.*)")//    @Pointcut("within(pan.springboot.service.PanAspectService)")//    public void executePointcut() {//        // 此处无需写任何代码//        log.info("调用 executePointcut() 方法");//    }    @Before( "executePointcut()" )    public void doBefore() {        log.info("调用 aop doBefore() 方法");		// 接收到请求，记录请求内容		ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();		HttpServletRequest request = attributes.getRequest();		// 记录下请求内容		StringBuilder result = new StringBuilder()				.append("\nURL : ")				.append(request.getRequestURL().toString())				.append("\nIP : ")				.append(PanHttpUtil.getIpAddress())				.append("\nREQUEST_METHOD : " + request.getMethod())				.append("\nREQUEST_HEADER: ")				.append(PanHttpUtil.getHeadersInfo())				.append("\nREQUEST_PARAMS: ")				.append(PanHttpUtil.getAllRequestParam());		log.info(result.toString());    }    @After( "executePointcut()" )    public void doAfter(JoinPoint joinPoint) {		log.info("调用 aop doAfter() 方法\n" + joinPoint);    }    @AfterReturning(returning = "ret", pointcut = "executePointcut()")    public void doAfterReturning(Object ret){        log.info("调用 aop doAfterReturning() 方法\nRESPONSE: " + ret);    }}